#include <iostream>
#include<string>
using namespace std;

class PhoneBook
{
private:
	string number;//전화번호
	string name;//이름

public:
	PhoneBook();//생성자
	void setPnum(string number);//전화번호 저장
	void setName(string name);//이름 저장
	void addPhone(string name, string number);//이름과 전화번호 저장
	string getPnum(); //전화번호 가져오기
	string getName(); //이름 가져오기
	void editPnum(string number);//전화번호 수정
};



class PhoneBookManager
{
private:
	PhoneBook* phoneB;//객체 배열 생성을 위한 선언
	int size;//객체 배열의 크기

public:
	PhoneBookManager(int num); //생성자-PhoneBook으로 객체 배열 생성
	void showAll();//전화번호부 목록 보기
	void searchPnum();//전화번호 찾기
	void addPnum(); //전화번호 객체 추가 생성(배열의 원소 개수가 +1 되야 함)
	void editPnum(); //전화번호 수정
};



int main()
{
	int index;//전화번호 개수
	int menu = 0;//메뉴번호
	cout << " --- SWING 전화번호부 ---" << endl;
	cout << "저장할 전화번호의 수를 입력해주세요 >> ";
	cin >> index;
	PhoneBookManager manager(index);//전화번호 추가 관리 함수
	while (menu != 5)//5번이 아니면 계속 반복
	{
		cout << endl << " --- SWING 전화번호부 --- " << endl;
		cout << "1. 전화번호부 보기" << endl;
		cout << "2. 전화번호 검색" << endl;
		cout << "3. 전화번호 추가하기" << endl;
		cout << "4. 전화번호 수정하기" << endl;
		cout << "5. 종료" << endl;
		cout << "번호를 입력해주세요 >> ";
		cin >> menu;

		switch (menu)
		{
		case 1://1.전화번호부 보기
		{
			manager.showAll();
			break;
		}
		case 2://2.전화번호 검색
		{
			manager.searchPnum();
			break;
		}
		case 3: //3.전화번호 추가하기
		{
			manager.addPnum();
			break;
		}
		case 4: //4.전화번호 수정하기
		{
			manager.editPnum();
			break;
		}
		case 5: //5.종료
		{
			cout << endl << endl << "프로그램을 종료합니다." << endl;
			break;
		}
		default: //1~5 이외의 번호 입력 시
			cout << endl << endl << "잘못 입력하셨습니다." << endl;
		}
	}
}



PhoneBook::PhoneBook()
{}



void PhoneBook::setPnum(string number) //새로운 전화번호 저장  
{
	this->number = number;
}



void PhoneBook::setName(string name)  //새로운 이름 저장
{
	this->name = name;
}



void PhoneBook::addPhone(string name, string number) //이름과 전화번호 묶어서 저장
{
	this->number = number;
	this->name = name;
}



string PhoneBook::getPnum() //저장된 전화번호 불러오기
{
	return number;
}



string PhoneBook::getName() //저장된 이름 불러오기
{
	return name;
}



void PhoneBook::editPnum(string number) //저장된 전화번호 수정하기
{
	this->number.replace(0, 13, number); //입력받은 전화번호로 수정(xxx-xxxx-xxxx  ==> 총 13자)
}



PhoneBookManager::PhoneBookManager(int index)
{
	int i;
	string name, number;
	size = index;
	phoneB = new PhoneBook[size]; //size(전화번호 개수)만큼 객체 배열을 동적으로 생성


	for (i = 0; i < index; i++) //전화번호 개수만큼 반복
	{
		cout << i + 1 << "번째 사람의 이름을 입력해주세요 >> ";
		cin >> name;
		phoneB[i].setName(name);
		cout << i + 1 << "번째 사람의 전화번호를 입력해주세요 >> ";
		cin >> number;
		phoneB[i].setPnum(number);
		cout << endl;
	}
}



void PhoneBookManager::showAll() //전화번호부 보기
{
	cout << endl << endl;
	int i;
	for (i = 0; i < size; i++)
	{
		cout << i + 1 << ". " << phoneB[i].getName();  //이름
		cout << "::" << phoneB[i].getPnum() << endl;   // 전화번호
	}
}



void PhoneBookManager::searchPnum()  //전화번호 검색
{
	int i, j = 100;//i,j 초기화
	string fname;//찾으려는 전화번호 주인의 이름
	cout << endl << endl << "누구의 번호를 검색하겠습니까? >> ";
	cin >> fname;
	for (i = 0; i < size; i++)
	{
		//찾으려는 전화번호의 주인이름 = 전화번호 주인 이름
		if (fname == phoneB[i].getName()) 
			j = i;//해당 인덱스 값 j에 대입
	}

	if (j < size) //객체배열의 크기보다 작으면
		cout << phoneB[j].getName() << "님의 전화번호 : " << phoneB[j].getPnum() << endl;

	if (j == 100) //j값이 변함x -> 존재하지 않는 전화번호
		cout << "연락처가 존재하지 않습니다." << endl;
}



void PhoneBookManager::addPnum() //전화번호 추가하기
{
	string newname, newnumber; //추가할 이름과 전화번호
	int i;

	cout << endl << endl << "이름을 입력해주세요 >> ";
	cin >> newname; 
	cout << "전화번호를 입력해주세요 >> ";
	cin >> newnumber;  

	PhoneBook* tmp = new PhoneBook[size + 1]; //임시 객체 배열 tmp를 생성

	for (i = 0; i < size; i++)
		tmp[i] = phoneB[i];   //tmp 배열에 phoneB 배열을 복사

	delete[] phoneB; //phoneB 배열 메모리를 반환
	size++; 
	phoneB = new PhoneBook[size]; //1만큼 증가되어진 size로 다시 메모리에 할당
	for (i = 0; i < size; i++)
		phoneB[i] = tmp[i];   //phoneB 배열에 tmp 배열을 복사
	phoneB[size - 1].addPhone(newname, newnumber);
	cout << "전화번호가 추가되었습니다." << endl;
}



void PhoneBookManager::editPnum()//전화번호 수정하기
{
	int i,j = 100;
	string ename, enumber;   //수정할 사람의 이름과 전화번호
	cout << endl << endl << "누구의 번호를 수정하겠습니까? >> ";
	cin >> ename;  
	for (i = 0; i < size; i++)
	{
		if (ename == phoneB[i].getName())
			j = i; //입력한 이름의 인덱스 값을 j에 대입
	}


	if (j < size) //객체배열의 크기보다 작으면 해당하는 인덱스 값의 전화번호를 수정
	{
		cout << "변경할 번호를 입력해주세요 >> ";
		cin >> enumber;
		phoneB[j].editPnum(enumber);
		cout << "전화번호가 변경되었습니다." << endl;
	}

	if (j == 100)  //j값이 변함x -> 존재하지 않는 전화번호
		cout << "연락처가 존재하지 않습니다." << endl;
}
